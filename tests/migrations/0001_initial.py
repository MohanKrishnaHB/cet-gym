# Generated by Django 3.0.6 on 2020-06-25 03:27

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
        ('questions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_attended', 'not_attended'), ('pass', 'pass'), ('fail', 'fail')], default='not_attended', max_length=20)),
                ('points', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('duration', models.TimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('no_of_questions', models.IntegerField()),
                ('total_duration', models.TimeField()),
                ('negative_marking', models.BooleanField(default=False)),
                ('commence_at', models.DateTimeField()),
                ('stop_commenceing_after', models.DateTimeField()),
                ('show_score', models.BooleanField(default=False)),
                ('show_answers', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TestQuestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='questions.Question')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='tests.Test')),
            ],
            options={
                'unique_together': {('test', 'question')},
            },
        ),
        migrations.CreateModel(
            name='StudentTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_attended', 'not_attended'), ('attending', 'attending'), ('finished', 'finished')], default='not_attended', max_length=20)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='users.Student')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='tests.Test')),
            ],
            options={
                'unique_together': {('test', 'student')},
            },
        ),
        migrations.CreateModel(
            name='StudentQuestionOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questions.Options')),
                ('student_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='option', to='tests.StudentQuestion')),
            ],
        ),
        migrations.AddField(
            model_name='studentquestion',
            name='question_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='tests.TestQuestions'),
        ),
        migrations.AddField(
            model_name='studentquestion',
            name='student_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='tests.StudentTest'),
        ),
        migrations.AlterUniqueTogether(
            name='studentquestion',
            unique_together={('question_test', 'student_test')},
        ),
    ]
